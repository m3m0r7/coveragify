#!/usr/bin/env php
<?php

$vendorPath = 'vendor';
if (!is_dir($vendorPath)) {
    $vendorPath = "../{$vendorPath}";
    if (!is_dir($vendorPath)) {
        $vendorPath = "../../{$vendorPath}";
    }
}

require_once "{$vendorPath}/autoload.php";
$relativePath = "{$vendorPath}/phpunit/phpunit/src/TextUI/TestRunner.php";

$param = $argv[1] ?? null;

if ($param === 'patch') {
    file_put_contents(
        $relativePath,
        str_replace(
            'use SebastianBergmann\\CodeCoverage\\Driver\\Selector',
            'use Coveragify\\PHPUnit\\Selector',
            file_get_contents($relativePath)
        ),
    );

    echo "Successfully patch\n";
    exit(0);
} elseif ($param === 'unpatch') {
    file_put_contents(
        $relativePath,
        str_replace(
            'use Coveragify\\PHPUnit\\Selector',
            'use SebastianBergmann\\CodeCoverage\\Driver\\Selector',
            file_get_contents($relativePath)
        ),
    );

    echo "Successfully unpatch\n";
    exit(0);
} elseif ($param === 'run') {
    $file = $argv[2] ?? null;

    if ($file === null || !is_file($file)) {
        echo "Specified file {$file} is not found.\n";
        exit(1);
    }

    // Update global variables
    $argv = $_SERVER['argv'] = $GLOBALS['argv'] = array_slice($argv, 2);
    $argc = $_SERVER['argc'] = $GLOBALS['argc'] = count($argv);

    // Find loaded composer
    $composerAutoloaderInitClass = array_values(
        array_filter(
            get_declared_classes(),
            static fn (string $name) => preg_match('/^ComposerAutoloaderInit/', $name)
        )
    )[0] ?? null;

    $composerStaticInitClass = array_values(
        array_filter(
            get_declared_classes(),
            static fn (string $name) => preg_match('/^Composer\\\\Autoload\\\\ComposerStaticInit/', $name)
        )
    )[0] ?? null;

    if ($composerAutoloaderInitClass === null) {
        echo "The composer autoloader init class is not found\n";
        exit(1);
    }

    if ($composerStaticInitClass === null) {
        echo "The composer static init class is not found\n";
        exit(1);
    }

    // Load renewed ClassLoader
    $loader = new \Coveragify\ClassLoader(\dirname($vendorPath));
    $loader::setConfigurations(getcwd());
    $loader->register(true);
    call_user_func($composerStaticInitClass::getInitializer($loader));

    // Remove default composer class loader
    spl_autoload_unregister([$composerAutoloaderInitClass::getLoader(), 'loadClass']);

    // Run via coveragify
    include $file;
}

echo "Unknown specified argument\n";
exit(1);